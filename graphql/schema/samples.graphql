input SamplesFilter {
  sampleID: StringFilter
  protocolID: StringFilter
  contactID: StringFilter
  siteID: StringFilter
  purposeID: StringFilter
  saMaterial: StringFilter
  datasetID: StringFilter
  origin: StringFilter
  repType: StringFilter
  collType: StringFilter
  collPer: FloatFilter
  collNum: IntFilter
  pooled: IntFilter
  collDT: DateTimeFilter
  collDTStart: DateTimeFilter
  collDTEnd: DateTimeFilter
  sentDate: DateTimeFilter
  recDate: DateTimeFilter
  qualityFlag: StringFilter
  lastEdited: DateTimeFilter
  notes: StringFilter
}

type Samples {
  sampleID: String
  protocolID: String
  organizationID: String
  contactID: String
  siteID: String
  purposeID: String
  saMaterial: String
  datasetID: String
  origin: String
  repType: String
  collType: String
  collPer: Float
  collNum: Int
  pooled: Int 
  collDT: DateTime
  collDTStart: DateTime
  collDTEnd: DateTime
  sentDate: DateTime
  recDate: DateTime
  reportable: String
  lastEdited: DateTime
  notes: String
  # parentSample: Samples
  # contact: Contacts
  # dataset: Datasets
  # site: Sites!
  # measures(filter: MeasuresFilter): [Measures]!
}

# type PageSamples {
#   total: Int
#   items: [Samples]
# }

extend type Query {
  samples(filter: SamplesFilter): [Samples]!
  # getPageSamples(filter: String, pagination: String, where: Condition, _debug: Boolean, _cache: Boolean): PageSamples
  # getFirstSamples(filter: String, pagination: String, where: Condition, _debug: Boolean, _cache: Boolean): Samples
}

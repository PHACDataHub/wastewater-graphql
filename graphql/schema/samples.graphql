input SamplesFilter {
  parSampID: StringFilter
  sampID: StringFilter
  mSRID: StringFilter
  contID: StringFilter
  siteID: StringFilter
  purposeID: StringFilter
  saMaterial: StringFilter
  dataID: StringFilter
  origin: StringFilter
  repType: StringFilter
  collType: StringFilter
  collPer: FloatFilter
  collNum: IntFilter
  pooled: IntFilter
  collDT: DateTimeFilter
  collDTStart: DateTimeFilter
  collDTEnd: DateTimeFilter
  sentDate: DateTimeFilter
  recDate: DateTimeFilter
  qualityFlag: StringFilter
  lastEdited: DateTimeFilter
  notes: StringFilter
}

type Samples {
  parSampID: String
  sampID: String
  mSRID: String
  contID: String
  siteID: String
  purposeID: String
  saMaterial: String
  dataID: String
  origin: String
  repType: String
  collType: String
  collPer: Float
  collNum: Int
  pooled: Int 
  collDT: DateTime
  collDTStart: DateTime
  collDTEnd: DateTime
  sentDate: DateTime
  recDate: DateTime
  qualityFlag: String
  lastEdited: DateTime
  notes: String
  parentSample: Samples
  methodSet: MethodSets
  contact: Contacts
  purpose: PartLUs
  dataset: Datasets
  site: Sites!
  measures(filter: MeasuresFilter): [Measures]!
}

extend type Query {
  samples(filter: SamplesFilter): [Samples]!
}

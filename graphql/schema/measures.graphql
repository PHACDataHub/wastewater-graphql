input MeasuresFilter {
  measRepID: StringFilter
  mSRID: StringFilter
  sampleID: StringFilter
  purposeID: StringFilter
  polygonID: StringFilter
  siteID: StringFilter
  dataID: StringFilter
  measSetRepID: StringFilter
  aDateStart: DateTimeFilter
  aDateEnd: DateTimeFilter
  repDate: DateTimeFilter
  specID: StringFilter
  fractionID: StringFilter
  measID: StringFilter
  groupID: StringFilter
  classID: StringFilter
  value: StringFilter
  unitID: StringFilter
  aggID: StringFilter
  index: IntFilter
  qualityFlag: StringFilter
  reportable: Boolean
  lastEdited: DateTimeFilter
  notes: StringFilter
}

type Measures {
  measRepID: String
  mSRID: String
  sampleID: String
  purposeID: String
  polygonID: String
  siteID: String
  dataID: String
  measSetRepID: String
  aDateStart: DateTime
  aDateEnd: DateTime
  repDate: DateTime
  specID: String
  fractionID: String
  measID: String
  groupID: String
  classID: String
  value: String
  unitID: String
  aggID: String
  index: Int
  qualityFlag: String
  reportable: Boolean
  lastEdited: DateTime
  notes: String
  methodSet: MethodSets
  sample: Samples
  purpose: PartLUs
  polygon: Polygons
  site: Sites
  dataset: Datasets
  measureSet: MeasureSets
  spec: PartLUs
  fraction: PartLUs
  meas: PartLUs
  group: PartLUs
  class: PartLUs
  unit: PartLUs
  agg: PartLUs
}

extend type Query {
  measures(filter: MeasuresFilter): [Measures]!
}
